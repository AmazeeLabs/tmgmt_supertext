<?php

/**
 * @file
 * Module file of the translation management test module.
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_supertext_tmgmt_translator_plugin_info() {
  return array(
    'supertext' => array(
      'label' => t('Supertext translator'),
      'description' => t('Supertext translation service.'),
      'plugin controller class' => 'TMGMTSupertextPluginController',
      'ui controller class' => 'TMGMTSupertextTranslatorUIController',
    ),
  );
}


/**
 * Implements hook_menu().
 */
function tmgmt_supertext_menu() {
  $items = array();

  $items['tmgmt_supertext_callback'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'supertext callback',
    'description' => '',
    'page callback' => 'tmgmt_supertext_callback',
    'access callback' => 'tmgmt_supertext_access_check',
  );
  return $items;
}

/**
 * Process response from supertext.
 *
 * The payload, once decoded, looks like this:
 *
  stdClass Object
  (
    [AccountId] => 11798
    [CallbackUrl] =>
    [CommunicationLang] =>
    [ContentType] =>
    [Currency] => CHF
    [Deadline] => 2012-01-23T13:52:12.0000000
    [DeliveryId] => 1
    [Groups] => Array
        (
            [0] => stdClass Object
                (
                    [Context] =>
                    [GroupId] =>
                    [Items] => Array
                        (
                            [0] => stdClass Object
                                (
                                    [Comment] =>
                                    [Content] => Tags
                                    [Context] =>
                                    [Id] => taxonomy:vocabulary:1:name
                                )

                            [1] => stdClass Object
                                (
                                    [Comment] =>
                                    [Content] => Use tags to group articles on similar topics into categories.
                                    [Context] =>
                                    [Id] => taxonomy:vocabulary:1:description
                                )

                        )

                )

        )

    [Id] => 14292
    [OrderDate] => 2012-01-22T02:52:12.0000000
    [OrderName] =>
    [OrderType] => Adaption
    [OrderTypeId] => 7
    [Password] =>
    [Price] => -1
    [ReferenceData] => 51:6905f8ae8dd7c961e3dc00c639e9b6b5
    [Referrer] =>
    [Service] => Translation
    [SourceLang] => en
    [Status] => Eingegangen
    [TargetLang] => pt-BR
    [WordCount] => 10
  )
 */
function tmgmt_supertext_callback() {
  $input = file_get_contents('php://input');
  $data = json_decode($input);

  $keys = explode(':', $data->ReferenceData);
  $tjid = array_shift($keys);

  $job = tmgmt_job_load($tjid);

  $translation = array();
  foreach ($data->Groups as $object_id => $object) {
    // Object <=> JobItem.
    foreach ($object->Items as $string_object) {
      $translation[$object->GroupId . TMGMT_ARRAY_DELIMITER . $string_object->Id] = array(
        '#text' => $string_object->Content,
      );
    }
  }
  $translation = tmgmt_unflatten_data($translation);

  $job->addTranslatedData(tmgmt_unflatten_data($translation));

  print t('Job submitted');
  return NULL;
}

/**
 * Access check if the request ist with a correct hash.
 */
function tmgmt_supertext_access_check() {

  $input = file_get_contents('php://input');
  $job = json_decode($input);
  if (isset($job->ReferenceData)) {
    // Check valid hash.
    $ref = explode(':', $job->ReferenceData);
    if (count($ref) == 2 && $ref[1] == tmgmt_supertext_hash($ref[0])) {
      $job->TMGMT_id = $ref[0];
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Create secret hash for supertext reference.
 */
function tmgmt_supertext_hash($id) {
  return md5(drupal_get_hash_salt() . $id);
}

/**
 * Validation for api username. Only a validation and now error
 * because quoting is also possible withouth an api username
 *
 * @todo Implement the pluginSettingsFormValidate() function when
 * http://drupal.org/node/1416372 is commited.
 */
function tmgmt_supertext_pluginsettingsform_validate_api_username($element, &$form_state, $form) {
  if (empty($element['#value'])) {
    drupal_set_message(t('To submit orders, you need to enter your Supertext email address.'), 'warning', FALSE);
    return;
  }
}

/**
 * Validation for api token. Only a validation and now error
 * because quoting is also possible withouth an api username.
 *
 * Also checks if the api settings are correct via Supertext.
 *
 * @todo Implement the pluginSettingsFormValidate() function when
 * http://drupal.org/node/1416372 is commited.
 */
function tmgmt_supertext_pluginsettingsform_validate_api_token($element, &$form_state, $form) {
  if (empty($element['#value'])) {
    drupal_set_message(t('To submit orders, you need to enter your Supertext API Token.'), 'warning', FALSE);
    return;
  }

  $plugin = tmgmt_translator_plugin_controller('supertext');
  $translator = $form_state['tmgmt_translator'];
  // This is a bit of a hack, otherwise we need to change the
  // supertextHttpRequest function just for this case.
  $translator->settings['api_username'] = $form_state['values']['settings']['api_username'];
  $translator->settings['api_token'] = $form_state['values']['settings']['api_token'];
  $response = $plugin->supertextHttpRequest('translation/accountcheck', $translator, NULL, "GET");
  if ($response->code == "200") {
    if ($response->data == 'false') {
      drupal_set_message(t('Your password or username is wrong.'), 'warning', FALSE);
    }
  }
  else {
    drupal_set_message(t("Couldn't check account data with Supertext. Response: @response", array('@response' => $response->data)), 'warning', FALSE);
  }
}
