<?php

/**
 * @file
 * Module file of the translation management test module.
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_supertext_tmgmt_translator_plugin_info() {
  return array(
    'supertext' => array(
      'label' => t('Supertext translator'),
      'description' => t('Supertext translation service.'),
      'plugin controller class' => 'TMGMTSupertextPluginController',
      'ui controller class' => 'TMGMTSupertextTranslatorUIController',
    ),
  );
}


/**
 * Implements hook_menu().
 */
function tmgmt_supertext_menu() {
  $items = array();

  $items['tmgmt_supertext_callback'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'supertext callback',
    'description' => '',
    'page callback' => 'tmgmt_supertext_callback',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Process response from supertext.
 *
 * The payload, once decoded, looks like this:
 *
  stdClass Object
  (
    [AccountId] => 11798
    [CallbackUrl] =>
    [CommunicationLang] =>
    [ContentType] =>
    [Currency] => CHF
    [Deadline] => 2012-01-23T13:52:12.0000000
    [DeliveryId] => 1
    [Groups] => Array
        (
            [0] => stdClass Object
                (
                    [Context] =>
                    [GroupId] =>
                    [Items] => Array
                        (
                            [0] => stdClass Object
                                (
                                    [Comment] =>
                                    [Content] => Tags
                                    [Context] =>
                                    [Id] => taxonomy:vocabulary:1:name
                                )

                            [1] => stdClass Object
                                (
                                    [Comment] =>
                                    [Content] => Use tags to group articles on similar topics into categories.
                                    [Context] =>
                                    [Id] => taxonomy:vocabulary:1:description
                                )

                        )

                )

        )

    [Id] => 14292
    [OrderDate] => 2012-01-22T02:52:12.0000000
    [OrderName] =>
    [OrderType] => Adaption
    [OrderTypeId] => 7
    [Password] =>
    [Price] => -1
    [ReferenceData] => 51:6905f8ae8dd7c961e3dc00c639e9b6b5
    [Referrer] =>
    [Service] => Translation
    [SourceLang] => en
    [Status] => Eingegangen
    [TargetLang] => pt-BR
    [WordCount] => 10
  )
 */
function tmgmt_supertext_callback() {

  // Check the input data.
  $input = file_get_contents('php://input');
  $data = json_decode($input);
  if (
    empty($data->ReferenceData)
    || !is_string($data->ReferenceData)
    || count(@list($job_id, $hash) = explode(':', $data->ReferenceData)) !== 2
    || !ctype_digit($job_id)
  ) {
    drupal_add_http_header('Status', '400 Bad Request');
    print 'ReferenceData parameter is not correct or does not exist';
    return;
  }
  if ($hash !== tmgmt_supertext_hash($job_id)) {
    drupal_add_http_header('Status', '403 Forbidden');
    print 'Hash is not correct in the ReferenceData parameter';
    return;
  }
  if (empty($data->Groups) || !is_array($data->Groups)) {
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Groups parameter is not correct or does not exist';
    return;
  }
  foreach ($data->Groups as $group_id => $group) {
    if (
      !isset($group->GroupId)
      || !is_scalar($group->GroupId)
      || !isset($group->Items)
      || !is_array($group->Items)
    ) {
      drupal_add_http_header('Status', '400 Bad Request');
      print format_string('Group object @group_id is not correct', array('@group_id' => $group_id));
      return;
    }
    foreach ($group->Items as $string_id => $string_object) {
      if (
        !is_object($string_object)
        || !isset($string_object->Id)
        || !is_scalar($string_object->Id)
        || !isset($string_object->Content)
        || !is_string($string_object->Content)
      ) {
        drupal_add_http_header('Status', '400 Bad Request');
        print format_string('String object @string_id in Group @group_id is not correct', array('@string_id' => $string_id, '@group_id' => $group_id));
        return;
      }
    }
  }

  // Load the job.
  try {
    $job = tmgmt_job_load($job_id);
  }
  catch (Exception $e) {
    watchdog_exception('tmgmt_supertext', $e);
    drupal_add_http_header('Status', '500 Internal Server Error');
    print format_string('An exception was thrown during loading job @job_id. Details are available in the log. Approximate timestamp: @time', array('@job_id' => $job_id, '@time' => time()));
    return;
  }
  if (!$job) {
    drupal_add_http_header('Status', '404 Not Found');
    print format_string('Job @job_id is not found', array('@job_id' => $job_id));
    return;
  }

  // Add translated data.
  $translation = array();
  foreach ($data->Groups as $group) {
    foreach ($group->Items as $string_object) {
      $translation[$group->GroupId . TMGMT_ARRAY_DELIMITER . $string_object->Id] = array(
        '#text' => $string_object->Content,
      );
    }
  }
  try {
    $job->addTranslatedData(tmgmt_unflatten_data($translation));
  }
  catch (Exception $e) {
    watchdog_exception('tmgmt_supertext', $e);
    drupal_add_http_header('Status', '500 Internal Server Error');
    print format_string('An exception was thrown during adding translated data to job @job_id. Details are available in the log. Approximate timestamp: @time', array('@job_id' => $job_id, '@time' => time()));
    return;
  }

  // The default 200 HTTP Status Code will be used.
  print 'Job submitted';
}

/**
 * Create secret hash for supertext reference.
 */
function tmgmt_supertext_hash($id) {
  return md5(drupal_get_hash_salt() . $id);
}

/**
 * Validation for api username. Only a validation and now error
 * because quoting is also possible withouth an api username
 *
 * @todo Implement the pluginSettingsFormValidate() function when
 * http://drupal.org/node/1416372 is commited.
 */
function tmgmt_supertext_pluginsettingsform_validate_api_username($element, &$form_state, $form) {
  if (empty($element['#value'])) {
    drupal_set_message(t('To submit orders, you need to enter your Supertext email address.'), 'warning', FALSE);
    return;
  }
}

/**
 * Validation for api token. Only a validation and now error
 * because quoting is also possible withouth an api username.
 *
 * Also checks if the api settings are correct via Supertext.
 *
 * @todo Implement the pluginSettingsFormValidate() function when
 * http://drupal.org/node/1416372 is commited.
 */
function tmgmt_supertext_pluginsettingsform_validate_api_token($element, &$form_state, $form) {
  if (empty($element['#value'])) {
    drupal_set_message(t('To submit orders, you need to enter your Supertext API Token.'), 'warning', FALSE);
    return;
  }

  $plugin = tmgmt_translator_plugin_controller('supertext');
  $translator = $form_state['tmgmt_translator'];
  // This is a bit of a hack, otherwise we need to change the
  // supertextHttpRequest function just for this case.
  $translator->settings['api_username'] = $form_state['values']['settings']['api_username'];
  $translator->settings['api_token'] = $form_state['values']['settings']['api_token'];
  $response = $plugin->supertextHttpRequest('accountcheck', $translator, NULL, "GET");
  if ($response->code == "200") {
    if ($response->data == 'false') {
      drupal_set_message(t('Your password or username is wrong.'), 'warning', FALSE);
    }
  }
  else {
    drupal_set_message(t("Couldn't check account data with Supertext. Response: @response<br />Check the log for more details.", array('@response' => $response->data)), 'warning', FALSE);
  }
}
